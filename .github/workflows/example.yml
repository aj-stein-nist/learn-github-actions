name: example
run-name: ${{ github.actor }} is learning GitHub Actions
on:
  push:
  workflow_dispatch:
    inputs:
      deployment:
        description: 'The kind of deployment, dictates Python version, test or prod'
        required: false
        options:
        - 'prod'
        - 'test'
        type: choice
jobs:
  job1:
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT: ${{ github.event.inputs.deployment != '' && github.event.inputs.deployment ||  format('{0}', 'prod')  }}
      PYTHON_VERSION_TEST: '3.10'
      PYTHON_VERSION_PROD: '3.8'
    steps:
      - name: Check out repo code first
        uses: actions/checkout@v3
        id: checkout
      - name: Setup Python for ${{ env.DEPLOYMENT }}
        if: env.DEPLOYMENT == 'test'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_TEST }}
        id: setup-python-test
      - name: Setup Python for ${{ env.DEPLOYMENT }}
        if: env.DEPLOYMENT == 'prod'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_PROD }}
        id: setup-python-prod
      - name: Check Python version
        run: python --version
        id: python-version
      - name: Run and test application code
        run: echo "result=$(python example.py ${{ secrets.SECRET_PARAM }} ${{ secrets.SECRET_PARAM_HASH }})" >> $GITHUB_OUTPUT
        id: run-example
      - name: If secret configuration bad, fail build
        if: ${{ steps.run-example.outputs.result }} == 'bad'
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Param and hash were not properly configured by application!')
